{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red24\green24\blue24;\red193\green193\blue193;
\red70\green137\blue204;\red66\green179\blue255;\red202\green202\blue202;\red140\green211\blue254;\red167\green197\blue152;
\red194\green126\blue101;\red67\green192\blue160;\red212\green214\blue154;\red183\green111\blue179;\red205\green173\blue106;
\red196\green83\blue86;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c12157\c12157\c12157;\cssrgb\c80000\c80000\c80000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c30980\c75686\c100000;\cssrgb\c83137\c83137\c83137;\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;
\cssrgb\c80784\c56863\c47059;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c77255\c52549\c75294;\cssrgb\c84314\c72941\c49020;
\cssrgb\c81961\c41176\c41176;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15480\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Complete Medical Scheduling System v3.0\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Ensures all unscheduled patients are properly tracked in Reschedule List\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Configuration\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf8 \strokec8 SLOT_LENGTH:\cf4 \strokec4  \cf9 \strokec9 10\cf4 \strokec4 ,            \cf2 \strokec2 // Base slot size in minutes\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 BLOCK_GAP_THRESHOLD:\cf4 \strokec4  \cf9 \strokec9 5\cf4 \strokec4 ,     \cf2 \strokec2 // Minutes gap to split blocks\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 MINIMUM_SLOT_SIZE:\cf4 \strokec4  \cf9 \strokec9 3\cf4 \strokec4 ,      \cf2 \strokec2 // Smallest schedulable segment\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 CHECKIN_BUFFER:\cf4 \strokec4  \cf9 \strokec9 15\cf4 \strokec4 ,         \cf2 \strokec2 // Minutes before appointment for check-in\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 DEFAULT_CONSULT_TIME:\cf4 \strokec4  \cf9 \strokec9 10\cf4 \strokec4 ,   \cf2 \strokec2 // Default consultation time\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 FIXED_SLOT_WINDOW:\cf4 \strokec4  \cf9 \strokec9 60\cf4 \strokec4 ,      \cf2 \strokec2 // Plus/minus minutes allowed for fixed slots\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 EXTENDED_SLOT_PERCENTAGE:\cf4 \strokec4  \cf9 \strokec9 0.15\cf4 \strokec4 ,\cb1 \
\cb3     \cf8 \strokec8 EXTENDED_SLOT_COLOR:\cf4 \strokec4  \cf10 \strokec10 '#FFE4E1'\cf4 \strokec4 ,\cb1 \
\cb3     \cf8 \strokec8 CLINIC_START_TIME:\cf4 \strokec4  \cf10 \strokec10 '08:30'\cf4 \strokec4   \cf2 \strokec2 // Global clinic start time\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\cb3   \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Add family group configuration\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 FAMILY_CONFIG\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf8 \strokec8 GROUP_PREFIX:\cf4 \strokec4  \cf10 \strokec10 'F'\cf4 \strokec4              \cf2 \strokec2 // Prefix used for family group indicators\cf4 \cb1 \strokec4 \
\cb3 \};\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Heap Implementation (unchanged)\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 class\cf4 \strokec4  \cf11 \strokec11 Heap\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 constructor\cf4 \strokec4 (\cf12 \strokec12 comparator\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  (\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 comparator\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 comparator\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 size\cf4 \strokec4 () \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 isEmpty\cf4 \strokec4 () \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 size\cf4 \strokec4 () \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 peek\cf4 \strokec4 () \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 insert\cf4 \strokec4 (\cf8 \strokec8 value\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 value\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 bubbleUp\cf4 \strokec4 (\cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 size\cf4 \strokec4 () \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 extract\cf4 \strokec4 () \{\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 isEmpty\cf4 \strokec4 ()) \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 min\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 last\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 .\cf12 \strokec12 pop\cf4 \strokec4 ();\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 isEmpty\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 last\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 bubbleDown\cf4 \strokec4 (\cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf6 \strokec6 min\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 bubbleUp\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 while\cf4 \strokec4  (\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 parentIndex\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 floor\cf4 \strokec4 ((\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 /\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 );\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 comparator\cf4 \strokec4 (\cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf6 \strokec6 parentIndex\cf4 \strokec4 ], \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 index\cf4 \strokec4 ])) \{\cb1 \
\cb3           \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 swap\cf4 \strokec4 (\cf6 \strokec6 parentIndex\cf4 \strokec4 , \cf8 \strokec8 index\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 parentIndex\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf13 \strokec13 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 bubbleDown\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 size\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 size\cf4 \strokec4 ();\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 while\cf4 \strokec4  (\cf5 \strokec5 true\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 smallest\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 index\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 leftChild\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 rightChild\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 leftChild\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 size\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 comparator\cf4 \strokec4 (\cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 smallest\cf4 \strokec4 ], \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 leftChild\cf4 \strokec4 ])) \{\cb1 \
\cb3           \cf8 \strokec8 smallest\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 leftChild\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 rightChild\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 size\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 comparator\cf4 \strokec4 (\cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 smallest\cf4 \strokec4 ], \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 rightChild\cf4 \strokec4 ])) \{\cb1 \
\cb3           \cf8 \strokec8 smallest\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 rightChild\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 smallest\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf8 \strokec8 index\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 this\cf4 \strokec4 .\cf12 \strokec12 swap\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4 , \cf8 \strokec8 smallest\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 smallest\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf13 \strokec13 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf12 \strokec12 swap\cf4 \strokec4 (\cf8 \strokec8 i\cf4 \strokec4 , \cf8 \strokec8 j\cf4 \strokec4 ) \{\cb1 \
\cb3       [\cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ], \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 j\cf4 \strokec4 ]] \cf7 \strokec7 =\cf4 \strokec4  [\cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 j\cf4 \strokec4 ], \cf5 \strokec5 this\cf4 \strokec4 .\cf8 \strokec8 heap\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ]];\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 class\cf4 \strokec4  \cf11 \strokec11 MaxHeap\cf4 \strokec4  \cf5 \strokec5 extends\cf4 \strokec4  \cf11 \strokec11 Heap\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 constructor\cf4 \strokec4 () \{\cb1 \
\cb3       \cf5 \strokec5 super\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 class\cf4 \strokec4  \cf11 \strokec11 MinHeap\cf4 \strokec4  \cf5 \strokec5 extends\cf4 \strokec4  \cf11 \strokec11 Heap\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 constructor\cf4 \strokec4 () \{\cb1 \
\cb3       \cf5 \strokec5 super\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 generateOptimizedSchedules\cf4 \strokec4 () \{\cb1 \
\cb3     \cf13 \strokec13 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '=== STARTING SCHEDULE GENERATION ==='\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // 1. Load Data\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 appointments\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 loadAppointmentData\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 patients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 appointments\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf12 \strokec12 buildPatientObject\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4 ));\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 byDate\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 groupPatientsByDate\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // 2. Process Each Date\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 results\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\};\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 allRescheduleList\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 allRemainingSlots\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  [\cf6 \strokec6 date\cf4 \strokec4 , \cf6 \strokec6 datePatients\cf4 \strokec4 ] \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 Object\cf4 \strokec4 .\cf12 \strokec12 entries\cf4 \strokec4 (\cf8 \strokec8 byDate\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 Processing date: %s (%s patients)'\cf4 \strokec4 , \cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 datePatients\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Create availability blocks\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 availabilityBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 createAvailabilityBlocks\cf4 \strokec4 (\cf8 \strokec8 datePatients\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Schedule patients\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \{ \cf6 \strokec6 scheduled\cf4 \strokec4 , \cf6 \strokec6 rescheduleList\cf4 \strokec4 , \cf6 \strokec6 remainingSlots\cf4 \strokec4  \} \cf7 \strokec7 =\cf4 \strokec4  \cb1 \
\cb3           \cf12 \strokec12 schedulePatients\cf4 \strokec4 (\cf8 \strokec8 datePatients\cf4 \strokec4 , \cf8 \strokec8 availabilityBlocks\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Track results\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 allRescheduleList\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 rescheduleList\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 allRemainingSlots\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 remainingSlots\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\{\cf7 \strokec7 ...\cf8 \strokec8 s\cf4 \strokec4 , \cf8 \strokec8 date\cf4 \strokec4 \})));\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 results\cf4 \strokec4 [\cf8 \strokec8 date\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 schedule:\cf4 \strokec4  \cf8 \strokec8 scheduled\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 availabilityBlocks\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 rescheduleList\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 remainingSlots\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // 3. Generate Output\cf4 \cb1 \strokec4 \
\cb3       \cf12 \strokec12 outputResults\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 , \cf8 \strokec8 allRescheduleList\cf4 \strokec4 , \cf8 \strokec8 allRemainingSlots\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \{ \cb1 \
\cb3         \cf8 \strokec8 success:\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 , \cb1 \
\cb3         \cf8 \strokec8 scheduled:\cf4 \strokec4  \cf8 \strokec8 Object\cf4 \strokec4 .\cf12 \strokec12 values\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 ).\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 r\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 r\cf4 \strokec4 .\cf8 \strokec8 schedule\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 , \cf9 \strokec9 0\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 rescheduled:\cf4 \strokec4  \cf8 \strokec8 allRescheduleList\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3       \cb1 \
\cb3     \} \cf13 \strokec13 catch\cf4 \strokec4  (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 'Error: %s\cf14 \strokec14 \\n\cf10 \strokec10 Stack: %s'\cf4 \strokec4 , \cf8 \strokec8 e\cf4 \strokec4 .\cf8 \strokec8 message\cf4 \strokec4 , \cf8 \strokec8 e\cf4 \strokec4 .\cf8 \strokec8 stack\cf4 \strokec4 );\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \{ \cf8 \strokec8 success:\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 , \cf8 \strokec8 message:\cf4 \strokec4  \cf8 \strokec8 e\cf4 \strokec4 .\cf8 \strokec8 message\cf4 \strokec4  \};\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // DATA LOADING FUNCTIONS (unchanged)\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 loadAppointmentData\cf4 \strokec4 () \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 ss\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf12 \strokec12 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'slotOptimization'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 planOfActionSheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'PlanOfActionMaster'\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 sheet\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 !\cf8 \strokec8 planOfActionSheet\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf13 \strokec13 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Error\cf4 \strokec4 (\cf10 \strokec10 'Required sheets not found'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '=== Family Group Processing: Data Loading ==='\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Load PlanOfActionMaster data and create procedure map\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 planData\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planOfActionSheet\cf4 \strokec4 .\cf12 \strokec12 getDataRange\cf4 \strokec4 ().\cf12 \strokec12 getDisplayValues\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 planHeaders\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planData\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procedureData\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Map\cf4 \strokec4 ();\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Create procedure data map (keeping this part simple)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procCol\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planHeaders\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Plan of action'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 prepCol\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planHeaders\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'PrepMin'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 consultCol\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planHeaders\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'ConsultMin'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 priorityCol\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planHeaders\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Priority'\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 planData\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 row\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 planData\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procedure\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 procCol\cf4 \strokec4 ];\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 procedure\cf4 \strokec4 ) \cf13 \strokec13 continue\cf4 \strokec4 ;\cb1 \
\cb3         \cf8 \strokec8 procedureData\cf4 \strokec4 .\cf12 \strokec12 set\cf4 \strokec4 (\cf8 \strokec8 procedure\cf4 \strokec4 , \{\cb1 \
\cb3           \cf8 \strokec8 prep:\cf4 \strokec4  \cf12 \strokec12 parseInt\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 prepCol\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 duration:\cf4 \strokec4  \cf12 \strokec12 parseInt\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 consultCol\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) \cf7 \strokec7 ||\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 DEFAULT_CONSULT_TIME\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 priority:\cf4 \strokec4  \cf12 \strokec12 parseInt\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 priorityCol\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 999\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Get appointment data\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 data\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getDataRange\cf4 \strokec4 ().\cf12 \strokec12 getDisplayValues\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 headers\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Create column index map with explicit indices for critical columns\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 colIndex\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 date:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Date'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 timeSlot:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'TimeSlot'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 mrd:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'MRD No'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 name:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Patient Name'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 age:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Age'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 gender:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Gender'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 mobile:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Mobile'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 procedures:\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4 .\cf12 \strokec12 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Procedures'\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 fixed:\cf4 \strokec4  \cf9 \strokec9 8\cf4 \strokec4 ,     \cf2 \strokec2 // Column I (0-based index)\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf9 \strokec9 9\cf4 \strokec4   \cf2 \strokec2 // Column J (0-based index)\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 'Family Group column (J) index: '\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 'Fixed Slot column (I) index: '\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 fixed\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Process each row\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 appointments\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf12 \strokec12 slice\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 ).\cf12 \strokec12 map\cf4 \strokec4 ((\cf8 \strokec8 row\cf4 \strokec4 , \cf8 \strokec8 i\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 rowNum\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 mrd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 ];\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 mrd\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf8 \strokec8 mrd\cf4 \strokec4 .\cf12 \strokec12 trim\cf4 \strokec4 () \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Get family group information\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyGroup\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ] \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 isPartOfFamily\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 familyGroup\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 familyGroup\cf4 \strokec4 .\cf12 \strokec12 toString\cf4 \strokec4 ().\cf12 \strokec12 trim\cf4 \strokec4 ().\cf12 \strokec12 startsWith\cf4 \strokec4 (\cf6 \strokec6 FAMILY_CONFIG\cf4 \strokec4 .\cf6 \strokec6 GROUP_PREFIX\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 isPartOfFamily\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Found family member - Row: \cf5 \strokec5 $\{\cf8 \strokec8 rowNum\cf5 \strokec5 \}\cf10 \strokec10 , MRD: \cf5 \strokec5 $\{\cf8 \strokec8 mrd\cf5 \strokec5 \}\cf10 \strokec10 , Group: \cf5 \strokec5 $\{\cf8 \strokec8 familyGroup\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Process Fixed Slot status - check for "fixed" in column I (case-insensitive)\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 fixedValue\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  (\cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 fixed\cf4 \strokec4 ] \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ).\cf12 \strokec12 toString\cf4 \strokec4 ().\cf12 \strokec12 trim\cf4 \strokec4 ().\cf12 \strokec12 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 isFixed\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 fixedValue\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 'fixed'\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 isFixed\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Found fixed slot patient - Row: \cf5 \strokec5 $\{\cf8 \strokec8 rowNum\cf5 \strokec5 \}\cf10 \strokec10 , MRD: \cf5 \strokec5 $\{\cf8 \strokec8 mrd\cf5 \strokec5 \}\cf10 \strokec10 , TimeSlot: \cf5 \strokec5 $\{\cf8 \strokec8 row\cf7 \strokec7 [\cf8 \strokec8 colIndex\cf7 \strokec7 .\cf8 \strokec8 timeSlot\cf7 \strokec7 ]\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Process TimeSlot\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 timeSlot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 timeSlot\cf4 \strokec4 ] \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 timeSlot\cf4 \strokec4  \cf5 \strokec5 instanceof\cf4 \strokec4  \cf11 \strokec11 Date\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 timeSlot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Utilities\cf4 \strokec4 .\cf12 \strokec12 formatDate\cf4 \strokec4 (\cf8 \strokec8 timeSlot\cf4 \strokec4 , \cf8 \strokec8 Session\cf4 \strokec4 .\cf12 \strokec12 getScriptTimeZone\cf4 \strokec4 (), \cf10 \strokec10 'HH:mm'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cf8 \strokec8 timeSlot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 timeSlot\cf4 \strokec4 .\cf12 \strokec12 trim\cf4 \strokec4 ();\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Process Procedures\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 procedures\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procString\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 ] \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf13 \strokec13 try\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 procedures\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 procString\cf4 \strokec4 .\cf12 \strokec12 startsWith\cf4 \strokec4 (\cf10 \strokec10 '['\cf4 \strokec4 ) \cf7 \strokec7 ?\cf4 \strokec4  \cb1 \
\cb3             \cf6 \strokec6 JSON\cf4 \strokec4 .\cf12 \strokec12 parse\cf4 \strokec4 (\cf8 \strokec8 procString\cf4 \strokec4 .\cf12 \strokec12 replace\cf4 \strokec4 (\cf15 \strokec15 /""/\cf5 \strokec5 g\cf4 \strokec4 , \cf10 \strokec10 '"'\cf4 \strokec4 )) \cf7 \strokec7 :\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 procString\cf4 \strokec4 .\cf12 \strokec12 split\cf4 \strokec4 (\cf10 \strokec10 ','\cf4 \strokec4 ).\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf12 \strokec12 trim\cf4 \strokec4 ()).\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 );\cb1 \
\cb3         \} \cf13 \strokec13 catch\cf4 \strokec4  (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Error parsing procedures for MRD \cf5 \strokec5 $\{\cf8 \strokec8 mrd\cf5 \strokec5 \}\cf10 \strokec10 : \cf5 \strokec5 $\{\cf8 \strokec8 e\cf7 \strokec7 .\cf8 \strokec8 message\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 return\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 Date:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 ],\cb1 \
\cb3           \cf8 \strokec8 TimeSlot:\cf4 \strokec4  \cf8 \strokec8 timeSlot\cf4 \strokec4 ,\cb1 \
\cb3           \cf10 \strokec10 "MRD No"\cf8 \strokec8 :\cf4 \strokec4  \cf8 \strokec8 mrd\cf4 \strokec4 ,\cb1 \
\cb3           \cf10 \strokec10 "Patient Name"\cf8 \strokec8 :\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 ],\cb1 \
\cb3           \cf8 \strokec8 Age:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 age\cf4 \strokec4 ],\cb1 \
\cb3           \cf8 \strokec8 Gender:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 gender\cf4 \strokec4 ],\cb1 \
\cb3           \cf8 \strokec8 Mobile:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 colIndex\cf4 \strokec4 .\cf8 \strokec8 mobile\cf4 \strokec4 ],\cb1 \
\cb3           \cf8 \strokec8 Procedures:\cf4 \strokec4  \cf8 \strokec8 procedures\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 ProcedureData:\cf4 \strokec4  \cf8 \strokec8 procedureData\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 isFixed:\cf4 \strokec4  \cf8 \strokec8 isFixed\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf8 \strokec8 familyGroup\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 isPartOfFamily:\cf4 \strokec4  \cf8 \strokec8 isPartOfFamily\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\cb3       \}).\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf5 \strokec5 null\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Log statistics\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 fixedAppointments\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 appointments\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 isFixed\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 === Appointment Statistics ==='\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Total appointments: \cf5 \strokec5 $\{\cf8 \strokec8 appointments\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Fixed slot appointments: \cf5 \strokec5 $\{\cf8 \strokec8 fixedAppointments\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 fixedAppointments\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `  - \cf5 \strokec5 $\{\cf8 \strokec8 a\cf7 \strokec7 [\cf10 \strokec10 "Patient Name"\cf7 \strokec7 ]\cf5 \strokec5 \}\cf10 \strokec10  (MRD: \cf5 \strokec5 $\{\cf8 \strokec8 a\cf7 \strokec7 [\cf10 \strokec10 "MRD No"\cf7 \strokec7 ]\cf5 \strokec5 \}\cf10 \strokec10 ) at \cf5 \strokec5 $\{\cf8 \strokec8 a\cf7 \strokec7 .\cf8 \strokec8 TimeSlot\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \});\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Log family group statistics\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyGroups\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Set\cf4 \strokec4 (\cf8 \strokec8 appointments\cf4 \cb1 \strokec4 \
\cb3         .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 isPartOfFamily\cf4 \strokec4 )\cb1 \
\cb3         .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ));\cb1 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 === Family Group Statistics ==='\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Number of family groups found: \cf5 \strokec5 $\{\cf8 \strokec8 familyGroups\cf7 \strokec7 .\cf8 \strokec8 size\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 familyGroups\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 group\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 members\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 appointments\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf8 \strokec8 group\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Group \cf5 \strokec5 $\{\cf8 \strokec8 group\cf5 \strokec5 \}\cf10 \strokec10 : \cf5 \strokec5 $\{\cf8 \strokec8 members\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10  members`\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 members\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 m\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `  - \cf5 \strokec5 $\{\cf8 \strokec8 m\cf7 \strokec7 [\cf10 \strokec10 "Patient Name"\cf7 \strokec7 ]\cf5 \strokec5 \}\cf10 \strokec10  (MRD: \cf5 \strokec5 $\{\cf8 \strokec8 m\cf7 \strokec7 [\cf10 \strokec10 "MRD No"\cf7 \strokec7 ]\cf5 \strokec5 \}\cf10 \strokec10 )`\cf4 \strokec4 ));\cb1 \
\cb3       \});\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 appointments\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3    \cf2 \strokec2 // CORE SCHEDULING FUNCTIONS ================================\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 cleanProcedureName\cf4 \strokec4 (\cf8 \strokec8 procedure\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf2 \strokec2 // Remove anything in brackets/parentheses and trim\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 procedure\cf4 \strokec4 .\cf12 \strokec12 replace\cf4 \strokec4 (\cf15 \strokec15 /\\s\cf14 \strokec14 *\\(\cf10 \strokec10 [^\cf15 \strokec15 )\cf10 \strokec10 ]\cf14 \strokec14 *\\)\cf15 \strokec15 \\s\cf14 \strokec14 *\cf15 \strokec15 /\cf4 \strokec4 , \cf10 \strokec10 ''\cf4 \strokec4 ).\cf12 \strokec12 trim\cf4 \strokec4 ();\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 buildPatientObject\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procedures\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 Procedures\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3       \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 999\cf4 \strokec4 ; \cf2 \strokec2 // Start with lowest priority\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 totalPrepTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ; \cf2 \strokec2 // Track total prep time\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 procedures\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 proc\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf2 \strokec2 // Clean the procedure name before looking up\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 cleanProc\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 cleanProcedureName\cf4 \strokec4 (\cf8 \strokec8 proc\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Get duration, priority and prep time from PlanOfActionMaster\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 procData\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 ProcedureData\cf4 \strokec4 .\cf12 \strokec12 get\cf4 \strokec4 (\cf8 \strokec8 cleanProc\cf4 \strokec4 ) \cf7 \strokec7 ||\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 duration:\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 DEFAULT_CONSULT_TIME\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 priority:\cf4 \strokec4  \cf9 \strokec9 999\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 prep:\cf4 \strokec4  \cf9 \strokec9 0\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 +=\cf4 \strokec4  \cf8 \strokec8 procData\cf4 \strokec4 .\cf8 \strokec8 duration\cf4 \strokec4 ;\cb1 \
\cb3         \cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 min\cf4 \strokec4 (\cf8 \strokec8 priority\cf4 \strokec4 , \cf8 \strokec8 procData\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 totalPrepTime\cf4 \strokec4  \cf7 \strokec7 +=\cf4 \strokec4  \cf8 \strokec8 procData\cf4 \strokec4 .\cf8 \strokec8 prep\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ; \cf2 \strokec2 // Sum up prep times\cf4 \cb1 \strokec4 \
\cb3       \});\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 date:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 Date\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 timeSlot:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 TimeSlot\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 mrd:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf10 \strokec10 "MRD No"\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 name:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 [\cf10 \strokec10 "Patient Name"\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 age:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 Age\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 gender:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 Gender\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 mobile:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 Mobile\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 procedures:\cf4 \strokec4  \cf8 \strokec8 procedures\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 consultTime:\cf4 \strokec4  \cf8 \strokec8 consultTime\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 priority:\cf4 \strokec4  \cf8 \strokec8 priority\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 prepTime:\cf4 \strokec4  \cf8 \strokec8 totalPrepTime\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 isScheduled:\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 isPartOfFamily:\cf4 \strokec4  \cf8 \strokec8 row\cf4 \strokec4 .\cf8 \strokec8 isPartOfFamily\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 groupPatientsByDate\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 patients\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 groups\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 groups\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Ensure consistent date format (YYYY-MM-DD)\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 dateKey\cf4 \strokec4 ;\cb1 \
\cb3         \cf13 \strokec13 try\cf4 \strokec4  \{\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 dateObj\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Date\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 dateKey\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Utilities\cf4 \strokec4 .\cf12 \strokec12 formatDate\cf4 \strokec4 (\cf8 \strokec8 dateObj\cf4 \strokec4 , \cf8 \strokec8 Session\cf4 \strokec4 .\cf12 \strokec12 getScriptTimeZone\cf4 \strokec4 (), \cf10 \strokec10 'yyyy-MM-dd'\cf4 \strokec4 );\cb1 \
\cb3         \} \cf13 \strokec13 catch\cf4 \strokec4  (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '
\f1 \uc0\u10060 
\f0  Invalid date format for patient %s: %s'\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 );\cb1 \
\cb3           \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 groups\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         (\cf8 \strokec8 groups\cf4 \strokec4 [\cf8 \strokec8 dateKey\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 groups\cf4 \strokec4 [\cf8 \strokec8 dateKey\cf4 \strokec4 ] \cf7 \strokec7 ||\cf4 \strokec4  []).\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3         \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 groups\cf4 \strokec4 ;\cb1 \
\cb3       \}, \{\});\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // CORE SCHEDULING FUNCTIONS ================================\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 createAvailabilityBlocks\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slotSet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Set\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CLINIC_START_TIME\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Extract all valid time slots\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 patients\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 timeSlot\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 mins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 timeSlot\cf4 \strokec4 );\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf12 \strokec12 isNaN\cf4 \strokec4 (\cf8 \strokec8 mins\cf4 \strokec4 ) \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 mins\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ) \cf8 \strokec8 slotSet\cf4 \strokec4 .\cf12 \strokec12 add\cf4 \strokec4 (\cf8 \strokec8 mins\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\cb3   \cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sortedSlots\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Array\cf4 \strokec4 .\cf12 \strokec12 from\cf4 \strokec4 (\cf8 \strokec8 slotSet\cf4 \strokec4 ).\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 sortedSlots\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  [];\cb1 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // Merge into continuous blocks\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 currentBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 sortedSlots\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ], \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 sortedSlots\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4 ,\cb1 \
\cb3       \cf8 \strokec8 available:\cf4 \strokec4  [\{ \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 sortedSlots\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ], \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ), \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 sortedSlots\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4  \}]\cb1 \
\cb3     \};\cb1 \
\cb3   \cb1 \
\cb3     \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 sortedSlots\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slotStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 sortedSlots\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 gap\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 slotStart\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 currentBlock\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 gap\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 BLOCK_GAP_THRESHOLD\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 currentBlock\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 slotStart\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4 ;\cb1 \
\cb3         \cf8 \strokec8 currentBlock\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ].\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 currentBlock\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ;\cb1 \
\cb3       \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 currentBlock\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 currentBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 slotStart\cf4 \strokec4 , \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ),\cb1 \
\cb3           \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 slotStart\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 available:\cf4 \strokec4  [\{ \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 slotStart\cf4 \strokec4 , \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ), \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 slotStart\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4  \}]\cb1 \
\cb3         \};\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 currentBlock\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\{\cb1 \
\cb3       \cf7 \strokec7 ...\cf8 \strokec8 b\cf4 \strokec4 ,\cb1 \
\cb3       \cf8 \strokec8 startTime:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 endTime:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 originalSlots:\cf4 \strokec4  \cf8 \strokec8 Array\cf4 \strokec4 .\cf12 \strokec12 from\cf4 \strokec4 (\cb1 \
\cb3         \{ \cf8 \strokec8 length:\cf4 \strokec4  (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4  \},\cb1 \
\cb3         (\cf8 \strokec8 _\cf4 \strokec4 , \cf8 \strokec8 i\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 SLOT_LENGTH\cf4 \strokec4 )\cb1 \
\cb3       ).\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 m\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 m\cf4 \strokec4 ))\cb1 \
\cb3     \}));\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 consolidateAcrossBlocks\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 rescheduleList\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 consolidationResults\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 newlyScheduled:\cf4 \strokec4  [],\cb1 \
\cb3       \cf8 \strokec8 movedAppointments:\cf4 \strokec4  []\cb1 \
\cb3     \};\cb1 \
\
\cb3     \cf2 \strokec2 // Sort reschedule list by priority and duration\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sortedRescheduleList\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [\cf7 \strokec7 ...\cf8 \strokec8 rescheduleList\cf4 \strokec4 ].\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ;\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf2 \strokec2 // For each unscheduled patient, try to create space by moving existing appointments\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 patient\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 sortedRescheduleList\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 durationNeeded\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requiredPrepTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CLINIC_START_TIME\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Find blocks with fragments that could potentially be consolidated\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blockPairs\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 findPotentialBlockPairs\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 durationNeeded\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \{ \cf6 \strokec6 sourceBlock\cf4 \strokec4 , \cf6 \strokec6 targetBlock\cf4 \strokec4 , \cf6 \strokec6 movableAppointment\cf4 \strokec4  \} \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 blockPairs\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Calculate fragments in both blocks\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sourceFragment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 calculateBlockFragment\cf4 \strokec4 (\cf8 \strokec8 sourceBlock\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 targetFragment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 calculateBlockFragment\cf4 \strokec4 (\cf8 \strokec8 targetBlock\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Check if moving the appointment would create enough space\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 sourceFragment\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 targetFragment\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 durationNeeded\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf2 \strokec2 // Try to move the appointment\cf4 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 success\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 moveAppointment\cf4 \strokec4 (\cf8 \strokec8 movableAppointment\cf4 \strokec4 , \cf8 \strokec8 sourceBlock\cf4 \strokec4 , \cf8 \strokec8 targetBlock\cf4 \strokec4 );\cb1 \
\cb3           \cb1 \
\cb3           \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 success\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf2 \strokec2 // Try to schedule the patient in the newly created space\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 newSlot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 findLargestAvailableSlot\cf4 \strokec4 (\cf8 \strokec8 sourceBlock\cf4 \strokec4 );\cb1 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 newSlot\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  (\cf8 \strokec8 newSlot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 newSlot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 durationNeeded\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 ) \{\cb1 \
\cb3               \cf2 \strokec2 // Calculate the earliest possible start time considering prep time\cf4 \cb1 \strokec4 \
\cb3               \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 newSlot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 );\cb1 \
\cb3               \cb1 \
\cb3               \cf2 \strokec2 // Check if we can fit the appointment after the earliest possible time\cf4 \cb1 \strokec4 \
\cb3               \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 durationNeeded\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 newSlot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf2 \strokec2 // Schedule the patient\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 appointment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3                   \cf7 \strokec7 ...\cf8 \strokec8 patient\cf4 \strokec4 ,\cb1 \
\cb3                   \cf8 \strokec8 consultStart:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 earliestStartTime\cf4 \strokec4 ),\cb1 \
\cb3                   \cf8 \strokec8 consultEnd:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 durationNeeded\cf4 \strokec4 ),\cb1 \
\cb3                   \cf8 \strokec8 checkInTime:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 ),\cb1 \
\cb3                   \cf8 \strokec8 isScheduled:\cf4 \strokec4  \cf5 \strokec5 true\cf4 \cb1 \strokec4 \
\cb3                 \};\cb1 \
\cb3                 \cb1 \
\cb3                 \cf8 \strokec8 consolidationResults\cf4 \strokec4 .\cf8 \strokec8 newlyScheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 );\cb1 \
\cb3                 \cf8 \strokec8 consolidationResults\cf4 \strokec4 .\cf8 \strokec8 movedAppointments\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3                   \cf8 \strokec8 appointment:\cf4 \strokec4  \cf8 \strokec8 movableAppointment\cf4 \strokec4 ,\cb1 \
\cb3                   \cf8 \strokec8 from:\cf4 \strokec4  \cf8 \strokec8 sourceBlock\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf10 \strokec10 '-'\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 sourceBlock\cf4 \strokec4 .\cf8 \strokec8 endTime\cf4 \strokec4 ,\cb1 \
\cb3                   \cf8 \strokec8 to:\cf4 \strokec4  \cf8 \strokec8 targetBlock\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf10 \strokec10 '-'\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 targetBlock\cf4 \strokec4 .\cf8 \strokec8 endTime\cf4 \cb1 \strokec4 \
\cb3                 \});\cb1 \
\cb3                 \cb1 \
\cb3                 \cf2 \strokec2 // Update block's available time\cf4 \cb1 \strokec4 \
\cb3                 \cf12 \strokec12 updateBlockAvailability\cf4 \strokec4 (\cf8 \strokec8 sourceBlock\cf4 \strokec4 , \cf8 \strokec8 earliestStartTime\cf4 \strokec4 , \cf8 \strokec8 durationNeeded\cf4 \strokec4 );\cb1 \
\cb3                 \cf13 \strokec13 break\cf4 \strokec4 ;\cb1 \
\cb3               \}\cb1 \
\cb3             \}\cb1 \
\cb3           \}\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 consolidationResults\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 findPotentialBlockPairs\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 totalDurationNeeded\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 pairs\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CLINIC_START_TIME\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 j\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf8 \strokec8 j\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 j\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sourceBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 targetBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 [\cf8 \strokec8 j\cf4 \strokec4 ];\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Find movable appointments in source block\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 movableAppointments\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 findMovableAppointments\cf4 \strokec4 (\cf8 \strokec8 sourceBlock\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 appointment\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 movableAppointments\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf2 \strokec2 // Check if moving this appointment could help\cf4 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 sourceFragment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 calculateBlockFragment\cf4 \strokec4 (\cf8 \strokec8 sourceBlock\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 targetFragment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 calculateBlockFragment\cf4 \strokec4 (\cf8 \strokec8 targetBlock\cf4 \strokec4 );\cb1 \
\cb3           \cb1 \
\cb3           \cf2 \strokec2 // Consider both consultation time and preparation time\cf4 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 appointmentTotalTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\cb3           \cb1 \
\cb3           \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 sourceFragment\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 targetFragment\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 totalDurationNeeded\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf2 \strokec2 // Verify that the target block can accommodate the appointment's prep time\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 targetStartTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 targetBlock\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ));\cb1 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 targetStartTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 targetBlock\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3               \cf8 \strokec8 pairs\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3                 \cf8 \strokec8 sourceBlock\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 targetBlock\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 movableAppointment:\cf4 \strokec4  \cf8 \strokec8 appointment\cf4 \cb1 \strokec4 \
\cb3               \});\cb1 \
\cb3             \}\cb1 \
\cb3           \}\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 pairs\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 findMovableAppointments\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Find appointments that could potentially be moved\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // These are typically shorter appointments that might fit in fragments of other blocks\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 calculateBlockFragment\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Calculate the size of unusable fragments in the block\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 totalFragment\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 available\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 duration\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ;\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 duration\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 MINIMUM_SLOT_SIZE\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 totalFragment\cf4 \strokec4  \cf7 \strokec7 +=\cf4 \strokec4  \cf8 \strokec8 duration\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 totalFragment\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 moveAppointment\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 , \cf8 \strokec8 sourceBlock\cf4 \strokec4 , \cf8 \strokec8 targetBlock\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Try to find a suitable slot in the target block\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 targetSlot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 findSuitableSlot\cf4 \strokec4 (\cf8 \strokec8 targetBlock\cf4 \strokec4 , \cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 targetSlot\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Remove from source block\cf4 \cb1 \strokec4 \
\cb3     \cf12 \strokec12 removeAppointmentFromBlock\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 , \cf8 \strokec8 sourceBlock\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Add to target block\cf4 \cb1 \strokec4 \
\cb3     \cf12 \strokec12 addAppointmentToBlock\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 , \cf8 \strokec8 targetBlock\cf4 \strokec4 , \cf8 \strokec8 targetSlot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 findSuitableSlot\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 duration\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Find a slot that can accommodate the appointment\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 find\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 duration\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 findLargestAvailableSlot\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Find the largest continuous available slot in the block\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 largest\cf4 \strokec4 , \cf8 \strokec8 current\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 currentDuration\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 current\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 current\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 largestDuration\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 largest\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 largest\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 largest\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 currentDuration\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 largestDuration\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 current\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 largest\cf4 \strokec4 ;\cb1 \
\cb3     \}, \cf5 \strokec5 null\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 updateBlockAvailability\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 startTime\cf4 \strokec4 , \cf8 \strokec8 duration\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Update the block's available slots after scheduling\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 findIndex\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 duration\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf7 \strokec7 -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 available\cf4 \strokec4 [\cf8 \strokec8 index\cf4 \strokec4 ];\cb1 \
\cb3       \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 splice\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Add remaining time before the appointment if any\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3           \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Add remaining time after the appointment if any\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 duration\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3           \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 duration\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 schedulePatients\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 , \cf8 \strokec8 availabilityBlocks\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 JSON\cf4 \strokec4 .\cf12 \strokec12 parse\cf4 \strokec4 (\cf6 \strokec6 JSON\cf4 \strokec4 .\cf12 \strokec12 stringify\cf4 \strokec4 (\cf8 \strokec8 availabilityBlocks\cf4 \strokec4 ));\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 patientsToSchedule\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 JSON\cf4 \strokec4 .\cf12 \strokec12 parse\cf4 \strokec4 (\cf6 \strokec6 JSON\cf4 \strokec4 .\cf12 \strokec12 stringify\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 ));\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Group family members\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 patientsToSchedule\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 groupFamilyMembers\cf4 \strokec4 (\cf8 \strokec8 patientsToSchedule\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 fixedPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patientsToSchedule\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 isFixed\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 nonFixedPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patientsToSchedule\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf7 \strokec7 !\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 isFixed\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 scheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 rescheduleList\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // PHASE 1: Fixed Slot Scheduling\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 fixedPatients\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 isScheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requestedTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 TimeSlot\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CLINIC_START_TIME\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 windowStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 clinicStartMins\cf4 \strokec4 , \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 FIXED_SLOT_WINDOW\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 windowEnd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 FIXED_SLOT_WINDOW\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Check if the requested time slot is valid considering clinic start time\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requiredBuffer\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 , \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CHECKIN_BUFFER\cf4 \strokec4 );\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requiredBuffer\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 clinicStartMins\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3                 \cf7 \strokec7 ...\cf8 \strokec8 patient\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 reason:\cf4 \strokec4  \cf10 \strokec10 `Requested time slot requires activities before clinic start time (\cf5 \strokec5 $\{\cf6 \strokec6 CONFIG\cf7 \strokec7 .\cf6 \strokec6 CLINIC_START_TIME\cf5 \strokec5 \}\cf10 \strokec10 )`\cf4 \cb1 \strokec4 \
\cb3             \});\cb1 \
\cb3             \cf13 \strokec13 return\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 suitableBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blockStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blockEnd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 endTime\cf4 \strokec4 );\cb1 \
\cb3             \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 blockStart\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 windowEnd\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 blockEnd\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 windowStart\cf4 \strokec4 ;\cb1 \
\cb3         \}).\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 ,\cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 abs\cf4 \strokec4 (\cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4 ) \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4 ) \cf7 \strokec7 -\cf4 \strokec4  \cb1 \
\cb3                        \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 abs\cf4 \strokec4 (\cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4 ) \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4 ));\cb1 \
\
\cb3         \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 block\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 suitableBlocks\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 find\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3                 \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 windowEnd\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 windowStart\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \cb1 \strokec4 \
\cb3                 (\cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 min\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 , \cf8 \strokec8 windowEnd\cf4 \strokec4 ) \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 windowStart\cf4 \strokec4 )) \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \cb1 \strokec4 \
\cb3             );\cb1 \
\cb3             \cb1 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 start\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 windowStart\cf4 \strokec4 );\cb1 \
\cb3                 \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 end\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 min\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 , \cf8 \strokec8 windowEnd\cf4 \strokec4 );\cb1 \
\cb3                 \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 assignedTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cb1 \
\cb3                                    \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 start\cf4 \strokec4 ;\cb1 \
\cb3                 \cb1 \
\cb3                 \cf13 \strokec13 if\cf4 \strokec4  (\cf12 \strokec12 scheduleAppointment\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 , \cf8 \strokec8 assignedTime\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 )) \{\cb1 \
\cb3                     \cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3                     \cf8 \strokec8 isScheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3                     \cf13 \strokec13 break\cf4 \strokec4 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 isScheduled\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3                 \cf7 \strokec7 ...\cf8 \strokec8 patient\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 reason:\cf4 \strokec4  \cf10 \strokec10 `No slot found within \'b1\cf5 \strokec5 $\{\cf6 \strokec6 CONFIG\cf7 \strokec7 .\cf6 \strokec6 FIXED_SLOT_WINDOW\cf5 \strokec5 \}\cf10 \strokec10  mins of \cf5 \strokec5 $\{\cf8 \strokec8 patient\cf7 \strokec7 .\cf8 \strokec8 TimeSlot\cf5 \strokec5 \}\cf10 \strokec10  that respects clinic start time (\cf5 \strokec5 $\{\cf6 \strokec6 CONFIG\cf7 \strokec7 .\cf6 \strokec6 CLINIC_START_TIME\cf5 \strokec5 \}\cf10 \strokec10 )`\cf4 \cb1 \strokec4 \
\cb3             \});\cb1 \
\cb3         \}\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf2 \strokec2 // PHASE 2: Split availability blocks around fixed appointments\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 splitBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 splitBlocksAroundFixedAppointments\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 scheduled\cf4 \strokec4 );\cb1 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 // PHASE 2: Priority Scheduling\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 patientQueue\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 MaxHeap\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 ,\cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3         \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \cb1 \strokec4 \
\cb3     );\cb1 \
\cb3     \cf8 \strokec8 nonFixedPatients\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 patientQueue\cf4 \strokec4 .\cf12 \strokec12 insert\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4 ));\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 blockQueue\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 MinHeap\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 ,\cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ].\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ].\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 blockQueue\cf4 \strokec4 .\cf12 \strokec12 insert\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 ));\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 while\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 patientQueue\cf4 \strokec4 .\cf12 \strokec12 isEmpty\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 patient\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patientQueue\cf4 \strokec4 .\cf12 \strokec12 extract\cf4 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 isScheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 while\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 blockQueue\cf4 \strokec4 .\cf12 \strokec12 isEmpty\cf4 \strokec4 ()) \{\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 block\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blockQueue\cf4 \strokec4 .\cf12 \strokec12 extract\cf4 \strokec4 ();\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3             \cb1 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf12 \strokec12 scheduleAppointment\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3                 \cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3                 \cf8 \strokec8 isScheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3                 \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \cf8 \strokec8 blockQueue\cf4 \strokec4 .\cf12 \strokec12 insert\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 );\cb1 \
\cb3                 \cf13 \strokec13 break\cf4 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 isScheduled\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3                 \cf7 \strokec7 ...\cf8 \strokec8 patient\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 reason:\cf4 \strokec4  \cf10 \strokec10 'No available slot matching requirements'\cf4 \cb1 \strokec4 \
\cb3             \});\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 // PHASE 3: Consolidation\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 consolidationResults\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 consolidateAcrossBlocks\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf7 \strokec7 !\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 isFixed\cf4 \strokec4 ));\cb1 \
\cb3     \cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 consolidationResults\cf4 \strokec4 .\cf8 \strokec8 newlyScheduled\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 rescheduleList\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3         \cf7 \strokec7 !\cf8 \strokec8 consolidationResults\cf4 \strokec4 .\cf8 \strokec8 newlyScheduled\cf4 \strokec4 .\cf12 \strokec12 some\cf4 \strokec4 (\cf8 \strokec8 np\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 np\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 )\cb1 \
\cb3     );\cb1 \
\
\cb3     \cf2 \strokec2 // PHASE 4: Extended Slot Generation\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 totalAvailable\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ), \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 extendedMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 floor\cf4 \strokec4 (\cf8 \strokec8 totalAvailable\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 EXTENDED_SLOT_PERCENTAGE\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 extendedMins\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 MINIMUM_SLOT_SIZE\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Create extended block after last regular block\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 lastBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 last\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 last\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 last\cf4 \strokec4 , \cf8 \strokec8 blocks\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ]);\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 extendedStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 lastBlock\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 BLOCK_GAP_THRESHOLD\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 extendedEnd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 extendedStart\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 extendedMins\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 extendedBlock\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3             \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 extendedStart\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 extendedEnd\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 available:\cf4 \strokec4  [\{ \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 extendedStart\cf4 \strokec4 , \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 extendedEnd\cf4 \strokec4  \}],\cb1 \
\cb3             \cf8 \strokec8 isExtended:\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 originalSlots:\cf4 \strokec4  [\cf10 \strokec10 'Extended Slot'\cf4 \strokec4 ]\cb1 \
\cb3         \};\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 extendedBlock\cf4 \strokec4 );\cb1 \
\
\cb3         \cf2 \strokec2 // Schedule highest priority/longest consultations first\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 extendedQueue\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [\cf7 \strokec7 ...\cf8 \strokec8 rescheduleList\cf4 \strokec4 ].\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3             \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \cb1 \strokec4 \
\cb3         );\cb1 \
\
\cb3         \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 patient\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf8 \strokec8 extendedQueue\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 extendedBlock\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf12 \strokec12 scheduleAppointment\cf4 \strokec4 (\cf8 \strokec8 extendedBlock\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3                 \cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3                 \cf8 \strokec8 rescheduleList\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 );\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 scheduled:\cf4 \strokec4  \cf8 \strokec8 scheduled\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 rescheduleList:\cf4 \strokec4  \cf8 \strokec8 rescheduleList\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 remainingSlots:\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 flatMap\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 )\cb1 \
\cb3     \};\cb1 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 scheduleAppointment\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 , \cf8 \strokec8 startTime\cf4 \strokec4 , \cf8 \strokec8 patient\cf4 \strokec4 ) \{\cb1 \
\
\cb3       \cf2 \strokec2 // New validation for fixed slots\cf4 \cb1 \strokec4 \
\cb3   \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 isFixed\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requestedTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 TimeSlot\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 windowStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 FIXED_SLOT_WINDOW\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 windowEnd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 requestedTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 FIXED_SLOT_WINDOW\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 windowStart\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  (\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ) \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 windowEnd\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ; \cf2 \strokec2 // Outside allowed window\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CLINIC_START_TIME\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requiredPrepTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requiredBuffer\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 requiredPrepTime\cf4 \strokec4 , \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CHECKIN_BUFFER\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Calculate the earliest possible start time considering prep time\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 clinicStartMins\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 requiredPrepTime\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // If the proposed start time is before the earliest possible time, adjust it\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 earliestStartTime\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf2 \strokec2 // Check if we can fit the appointment after the earliest possible time\cf4 \cb1 \strokec4 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 earliestStartTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 earliestStartTime\cf4 \strokec4 ;\cb1 \
\cb3             \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3                 \cf2 \strokec2 // Cannot fit appointment in this slot due to prep time constraints\cf4 \cb1 \strokec4 \
\cb3                 \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 endTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Verify that the entire appointment (including prep) fits within the slot\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 endTime\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{ \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \});\cb1 \
\cb3         \}\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{ \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \strokec4 , \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \});\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 ,\cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 startTime\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 endTime\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requiredBuffer\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 isExtended\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 isExtended\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3         \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 determineRescheduleReason\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 , \cf8 \strokec8 blocks\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 totalAvailable\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 blocks\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3       \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 s\cf4 \strokec4 , \cf8 \strokec8 i\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 i\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ), \cf9 \strokec9 0\cf4 \strokec4 ), \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 totalAvailable\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf10 \strokec10 'No available time slots remaining'\cf4 \strokec4 ;\cb1 \
\cb3     \} \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 totalAvailable\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf10 \strokec10 `Required \cf5 \strokec5 $\{\cf8 \strokec8 patient\cf7 \strokec7 .\cf8 \strokec8 consultTime\cf5 \strokec5 \}\cf10 \strokec10  mins, only \cf5 \strokec5 $\{\cf8 \strokec8 totalAvailable\cf5 \strokec5 \}\cf10 \strokec10  mins available`\cf4 \strokec4 ;\cb1 \
\cb3     \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf10 \strokec10 'Could not find contiguous slot matching priority'\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // OUTPUT GENERATION ========================================\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 generateUtilizationReport\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 , \cf8 \strokec8 allRescheduleList\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 ss\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf12 \strokec12 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 sheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Utilization Report'\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 sheet\cf4 \strokec4 ) \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 clearContents\cf4 \strokec4 ();\cb1 \
\cb3     \cf13 \strokec13 else\cf4 \strokec4  \cf8 \strokec8 sheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 insertSheet\cf4 \strokec4 (\cf10 \strokec10 'Utilization Report'\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 // Set headers\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3       \cf10 \strokec10 'Date'\cf4 \strokec4 , \cf10 \strokec10 'Total Available (mins)'\cf4 \strokec4 , \cf10 \strokec10 'Scheduled (mins)'\cf4 \strokec4 , \cf10 \strokec10 'Remaining (mins)'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 'Utilization %'\cf4 \strokec4 , \cf10 \strokec10 'Scheduled Patients'\cf4 \strokec4 , \cf10 \strokec10 'Rescheduled Patients'\cf4 \strokec4 , \cf10 \strokec10 'Total Patients'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 'Validation'\cf4 \cb1 \strokec4 \
\cb3     ]]);\cb1 \
\cb3     \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 ).\cf12 \strokec12 setBackground\cf4 \strokec4 (\cf10 \strokec10 '#eeeeee'\cf4 \strokec4 ).\cf12 \strokec12 setFontWeight\cf4 \strokec4 (\cf10 \strokec10 'bold'\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 // Calculate metrics for each date\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 reportRow\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 Object\cf4 \strokec4 .\cf12 \strokec12 entries\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 ).\cf12 \strokec12 forEach\cf4 \strokec4 (([\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 data\cf4 \strokec4 ]) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf2 \strokec2 // Calculate total available minutes from blocks\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 totalAvailable\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 availabilityBlocks\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 block\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3         \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ), \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Calculate scheduled minutes\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 scheduledMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 schedule\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 appt\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3         \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 , \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Calculate remaining minutes (only from slots meeting minimum size)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 remainingMins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 remainingSlots\cf4 \strokec4 .\cf12 \strokec12 reduce\cf4 \strokec4 ((\cf8 \strokec8 sum\cf4 \strokec4 , \cf8 \strokec8 slot\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3         \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 duration\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 MINIMUM_SLOT_SIZE\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 sum\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 duration\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 sum\cf4 \strokec4 , \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Calculate utilization percentage\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 utilization\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  ((\cf8 \strokec8 scheduledMins\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf8 \strokec8 totalAvailable\cf4 \strokec4 ) \cf7 \strokec7 *\cf4 \strokec4  \cf9 \strokec9 100\cf4 \strokec4 ).\cf12 \strokec12 toFixed\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Count scheduled patients for this date\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 scheduledPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 schedule\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf2 \strokec2 // Count rescheduled patients for this date\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 rescheduledPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 rescheduleList\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf2 \strokec2 // Calculate total patients (scheduled + rescheduled)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 totalPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 scheduledPatients\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 rescheduledPatients\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf2 \strokec2 // Validation check\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 unusableTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 totalAvailable\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 scheduledMins\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 remainingMins\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 validation\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 unusableTime\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cb1 \
\cb3         \cf10 \strokec10 `\cf5 \strokec5 $\{\cf8 \strokec8 unusableTime\cf5 \strokec5 \}\cf10 \strokec10  mins in fragments < \cf5 \strokec5 $\{\cf6 \strokec6 CONFIG\cf7 \strokec7 .\cf6 \strokec6 MINIMUM_SLOT_SIZE\cf5 \strokec5 \}\cf10 \strokec10  mins`\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cb1 \
\cb3         \cf10 \strokec10 'All time accounted for'\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf2 \strokec2 // Output row\cf4 \cb1 \strokec4 \
\cb3       \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf8 \strokec8 reportRow\cf7 \strokec7 ++\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3         \cf8 \strokec8 date\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 totalAvailable\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 scheduledMins\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 remainingMins\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 utilization\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf10 \strokec10 '%'\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 scheduledPatients\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 rescheduledPatients\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 totalPatients\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 validation\cf4 \cb1 \strokec4 \
\cb3       ]]);\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf2 \strokec2 // Auto-resize columns\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 autoResizeColumns\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 outputResults\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 , \cf8 \strokec8 allRescheduleList\cf4 \strokec4 , \cf8 \strokec8 allRemainingSlots\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 ss\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf12 \strokec12 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 === Family Group Scheduling Results ==='\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Modify sheet clearing to remove formatting\cf4 \cb1 \strokec4 \
\cb3     [\cf10 \strokec10 'Optimized Schedule'\cf4 \strokec4 , \cf10 \strokec10 'Availability Blocks'\cf4 \strokec4 , \cf10 \strokec10 'Reschedule List'\cf4 \strokec4 , \cf10 \strokec10 'Utilization Report'\cf4 \strokec4 , \cf10 \strokec10 'Family Groups'\cf4 \strokec4 ].\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 name\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 sheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 name\cf4 \strokec4 );\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 clear\cf4 \strokec4 ();  \cf2 \strokec2 // Changed from clearContents() to clear()\cf4 \cb1 \strokec4 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3             \cf8 \strokec8 sheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 insertSheet\cf4 \strokec4 (\cf8 \strokec8 name\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Set headers\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 name\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 'Optimized Schedule'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 10\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3             \cf10 \strokec10 'Date'\cf4 \strokec4 , \cf10 \strokec10 'MRD No'\cf4 \strokec4 , \cf10 \strokec10 'Patient Name'\cf4 \strokec4 , \cf10 \strokec10 'Procedures'\cf4 \strokec4 , \cf10 \strokec10 'Priority'\cf4 \strokec4 ,\cb1 \
\cb3             \cf10 \strokec10 'Check-In Time'\cf4 \strokec4 , \cf10 \strokec10 'Consult Start'\cf4 \strokec4 , \cf10 \strokec10 'Consult End'\cf4 \strokec4 , \cf10 \strokec10 'Duration (mins)'\cf4 \strokec4 , \cf10 \strokec10 'Family Group'\cf4 \cb1 \strokec4 \
\cb3           ]]);\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 name\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 'Availability Blocks'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 7\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3             \cf10 \strokec10 'Date'\cf4 \strokec4 , \cf10 \strokec10 'Block Start'\cf4 \strokec4 , \cf10 \strokec10 'Block End'\cf4 \strokec4 , \cf10 \strokec10 'Duration (mins)'\cf4 \strokec4 , \cb1 \
\cb3             \cf10 \strokec10 'Original Slots'\cf4 \strokec4 , \cf10 \strokec10 'Remaining Slots'\cf4 \strokec4 , \cf10 \strokec10 'All Unused Fragments'\cf4 \cb1 \strokec4 \
\cb3           ]]);\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 name\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 'Reschedule List'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3             \cf10 \strokec10 'Date'\cf4 \strokec4 , \cf10 \strokec10 'MRD No'\cf4 \strokec4 , \cf10 \strokec10 'Patient Name'\cf4 \strokec4 , \cf10 \strokec10 'Procedures'\cf4 \strokec4 , \cf10 \strokec10 'Priority'\cf4 \strokec4 ,\cb1 \
\cb3             \cf10 \strokec10 'Duration Needed'\cf4 \strokec4 , \cf10 \strokec10 'Original Time Slot'\cf4 \strokec4 , \cf10 \strokec10 'Reason'\cf4 \strokec4 , \cf10 \strokec10 'Attempted Blocks'\cf4 \cb1 \strokec4 \
\cb3           ]]);\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 name\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 'Family Groups'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 7\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3             \cf10 \strokec10 'Date'\cf4 \strokec4 , \cf10 \strokec10 'Family Group'\cf4 \strokec4 , \cf10 \strokec10 'Members'\cf4 \strokec4 , \cf10 \strokec10 'Total Duration (mins)'\cf4 \strokec4 ,\cb1 \
\cb3             \cf10 \strokec10 'Check-In Time'\cf4 \strokec4 , \cf10 \strokec10 'Consult Start'\cf4 \strokec4 , \cf10 \strokec10 'Consult End'\cf4 \cb1 \strokec4 \
\cb3           ]]);\cb1 \
\cb3         \}\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 name\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf10 \strokec10 'Utilization Report'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf8 \strokec8 sheet\cf4 \strokec4 .\cf12 \strokec12 getLastColumn\cf4 \strokec4 ())\cb1 \
\cb3             .\cf12 \strokec12 setBackground\cf4 \strokec4 (\cf10 \strokec10 '#eeeeee'\cf4 \strokec4 ).\cf12 \strokec12 setFontWeight\cf4 \strokec4 (\cf10 \strokec10 'bold'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3     \});\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Generate Utilization Report\cf4 \cb1 \strokec4 \
\cb3     \cf12 \strokec12 generateUtilizationReport\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 , \cf8 \strokec8 allRescheduleList\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Setup sheets and process results\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 allScheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyGroupDetails\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 Object\cf4 \strokec4 .\cf12 \strokec12 entries\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 ).\cf12 \strokec12 forEach\cf4 \strokec4 (([\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 data\cf4 \strokec4 ]) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 schedule\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 isFamily\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyMembers\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `\cf14 \strokec14 \\n\cf10 \strokec10 Scheduled Family Group \cf5 \strokec5 $\{\cf8 \strokec8 p\cf7 \strokec7 .\cf8 \strokec8 familyGroup\cf5 \strokec5 \}\cf10 \strokec10 :`\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Check-in: \cf5 \strokec5 $\{\cf8 \strokec8 p\cf7 \strokec7 .\cf8 \strokec8 checkInTime\cf5 \strokec5 \}\cf10 \strokec10 , Consult: \cf5 \strokec5 $\{\cf8 \strokec8 p\cf7 \strokec7 .\cf8 \strokec8 consultStart\cf5 \strokec5 \}\cf10 \strokec10 -\cf5 \strokec5 $\{\cf8 \strokec8 p\cf7 \strokec7 .\cf8 \strokec8 consultEnd\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3           \cb1 \
\cb3           \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyMembers\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 member\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `- Member: \cf5 \strokec5 $\{\cf8 \strokec8 member\cf7 \strokec7 .\cf8 \strokec8 name\cf5 \strokec5 \}\cf10 \strokec10  (MRD: \cf5 \strokec5 $\{\cf8 \strokec8 member\cf7 \strokec7 .\cf8 \strokec8 mrd\cf5 \strokec5 \}\cf10 \strokec10 )`\cf4 \strokec4 );\cb1 \
\cb3             \cf8 \strokec8 allScheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3               \cf8 \strokec8 date\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 mrd:\cf4 \strokec4  \cf8 \strokec8 member\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 name:\cf4 \strokec4  \cf8 \strokec8 member\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 procedures:\cf4 \strokec4  \cf8 \strokec8 member\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ),\cb1 \
\cb3               \cf8 \strokec8 priority:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 checkInTime:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 consultStart:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 consultEnd:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 consultTime:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ,\cb1 \
\cb3               \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \cb1 \strokec4 \
\cb3             \});\cb1 \
\cb3           \});\cb1 \
\cb3           \cb1 \
\cb3           \cf8 \strokec8 familyGroupDetails\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3             \cf8 \strokec8 date\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 members:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyMembers\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 m\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 m\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 ).\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ),\cb1 \
\cb3             \cf8 \strokec8 totalDuration:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 checkInTime:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 consultStart:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 consultEnd:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \cb1 \strokec4 \
\cb3           \});\cb1 \
\cb3         \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf8 \strokec8 allScheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3             \cf8 \strokec8 date\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 mrd:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 name:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 procedures:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ),\cb1 \
\cb3             \cf8 \strokec8 priority:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 checkInTime:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 consultStart:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 consultEnd:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 consultTime:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 familyGroup:\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \cb1 \strokec4 \
\cb3           \});\cb1 \
\cb3         \}\cb1 \
\cb3       \});\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `\cf14 \strokec14 \\n\cf10 \strokec10 Total family groups scheduled: \cf5 \strokec5 $\{\cf8 \strokec8 familyGroupDetails\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 // Sort scheduled appointments by Check-In Time\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 allScheduled\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 timeA\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 timeB\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 );\cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 timeA\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 timeB\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // Populate Optimized Schedule with sorted data\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 scheduleSheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Optimized Schedule'\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 allScheduled\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 ((\cf8 \strokec8 p\cf4 \strokec4 , \cf8 \strokec8 index\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 range\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 scheduleSheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 10\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 range\cf4 \strokec4 .\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3         \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \cb1 \strokec4 \
\cb3       ]]);\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 isExtended\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 range\cf4 \strokec4 .\cf12 \strokec12 setBackground\cf4 \strokec4 (\cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 EXTENDED_SLOT_COLOR\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // Populate Family Groups sheet\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familySheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Family Groups'\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 familyGroupDetails\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 Populating Family Groups sheet:'\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 familyGroupDetails\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 ((\cf8 \strokec8 group\cf4 \strokec4 , \cf8 \strokec8 index\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Writing group \cf5 \strokec5 $\{\cf8 \strokec8 group\cf7 \strokec7 .\cf8 \strokec8 familyGroup\cf5 \strokec5 \}\cf10 \strokec10 : \cf5 \strokec5 $\{\cf8 \strokec8 group\cf7 \strokec7 .\cf8 \strokec8 members\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 familySheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 7\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3           \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 members\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 totalDuration\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 checkInTime\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \cb1 \strokec4 \
\cb3         ]]);\cb1 \
\cb3       \});\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 // Populate Availability Blocks\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 availSheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Availability Blocks'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 availRow\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 Object\cf4 \strokec4 .\cf12 \strokec12 entries\cf4 \strokec4 (\cf8 \strokec8 results\cf4 \strokec4 ).\cf12 \strokec12 forEach\cf4 \strokec4 (([\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 data\cf4 \strokec4 ]) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 availabilityBlocks\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 remainingSlots\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 remainingSlots\cf4 \cb1 \strokec4 \
\cb3           .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 remainingSlots\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 remaining\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 remainingSlots\cf4 \cb1 \strokec4 \
\cb3           .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf10 \strokec10 `\cf5 \strokec5 $\{\cf12 \strokec12 minutesToTimeString\cf7 \strokec7 (\cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 start\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 -\cf5 \strokec5 $\{\cf12 \strokec12 minutesToTimeString\cf7 \strokec7 (\cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 end\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 )\cb1 \
\cb3           .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 '; '\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 allFragments\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 remainingSlots\cf4 \cb1 \strokec4 \
\cb3           .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf10 \strokec10 `\cf5 \strokec5 $\{\cf12 \strokec12 minutesToTimeString\cf7 \strokec7 (\cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 start\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 -\cf5 \strokec5 $\{\cf12 \strokec12 minutesToTimeString\cf7 \strokec7 (\cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 end\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10  (\cf5 \strokec5 $\{\cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 end\cf7 \strokec7  - \cf8 \strokec8 s\cf7 \strokec7 .\cf8 \strokec8 start\cf5 \strokec5 \}\cf10 \strokec10 m)`\cf4 \strokec4 )\cb1 \
\cb3           .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 '; '\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 availSheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf8 \strokec8 availRow\cf7 \strokec7 ++\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 7\cf4 \strokec4 ).\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3           \cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 startTime\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 endTime\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 originalSlots\cf4 \strokec4 .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ), \cb1 \
\cb3           \cf8 \strokec8 remaining\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 'Fully utilized'\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 allFragments\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 'No unused fragments'\cf4 \cb1 \strokec4 \
\cb3         ]]);\cb1 \
\cb3       \});\cb1 \
\cb3     \});\cb1 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // Populate Reschedule List\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 rescheduleSheet\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Reschedule List'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 rescheduleRow\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 allRescheduleList\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 range\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 rescheduleSheet\cf4 \strokec4 .\cf12 \strokec12 getRange\cf4 \strokec4 (\cf8 \strokec8 rescheduleRow\cf7 \strokec7 ++\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 range\cf4 \strokec4 .\cf12 \strokec12 setValues\cf4 \strokec4 ([[\cb1 \
\cb3         \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 date\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 name\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 .\cf12 \strokec12 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ), \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 timeSlot\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf10 \strokec10 'None'\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 reason\cf4 \strokec4 , \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 attemptedBlocks\cf4 \cb1 \strokec4 \
\cb3       ]]);\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ) \cf8 \strokec8 range\cf4 \strokec4 .\cf12 \strokec12 setBackground\cf4 \strokec4 (\cf10 \strokec10 '#ffebee'\cf4 \strokec4 );\cb1 \
\cb3       \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 2\cf4 \strokec4 ) \cf8 \strokec8 range\cf4 \strokec4 .\cf12 \strokec12 setBackground\cf4 \strokec4 (\cf10 \strokec10 '#fff8e1'\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\cb3   \cb1 \
\cb3     \cf2 \strokec2 // Auto-resize columns\cf4 \cb1 \strokec4 \
\cb3     [\cf10 \strokec10 'Optimized Schedule'\cf4 \strokec4 , \cf10 \strokec10 'Availability Blocks'\cf4 \strokec4 , \cf10 \strokec10 'Reschedule List'\cf4 \strokec4 , \cf10 \strokec10 'Family Groups'\cf4 \strokec4 ].\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 name\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 ss\cf4 \strokec4 .\cf12 \strokec12 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 name\cf4 \strokec4 ).\cf12 \strokec12 autoResizeColumns\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 20\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // UTILITY FUNCTIONS ========================================\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 timeStr\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 timeStr\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4  \cf5 \strokec5 NaN\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  [\cf6 \strokec6 hours\cf4 \strokec4 , \cf6 \strokec6 minutes\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 timeStr\cf4 \strokec4 .\cf12 \strokec12 split\cf4 \strokec4 (\cf10 \strokec10 ':'\cf4 \strokec4 ).\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 Number\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  (\cf8 \strokec8 hours\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf9 \strokec9 60\cf4 \strokec4 ) \cf7 \strokec7 +\cf4 \strokec4  (\cf8 \strokec8 minutes\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 totalMinutes\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 hours\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 floor\cf4 \strokec4 (\cf8 \strokec8 totalMinutes\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf9 \strokec9 60\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 mins\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 floor\cf4 \strokec4 (\cf8 \strokec8 totalMinutes\cf4 \strokec4  \cf7 \strokec7 %\cf4 \strokec4  \cf9 \strokec9 60\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 return\cf4 \strokec4  \cf10 \strokec10 `\cf5 \strokec5 $\{\cf8 \strokec8 hours\cf7 \strokec7 .\cf12 \strokec12 toString\cf7 \strokec7 ().\cf12 \strokec12 padStart\cf7 \strokec7 (\cf9 \strokec9 2\cf7 \strokec7 , \cf10 \strokec10 '0'\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 :\cf5 \strokec5 $\{\cf8 \strokec8 mins\cf7 \strokec7 .\cf12 \strokec12 toString\cf7 \strokec7 ().\cf12 \strokec12 padStart\cf7 \strokec7 (\cf9 \strokec9 2\cf7 \strokec7 , \cf10 \strokec10 '0'\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 removeAppointmentFromBlock\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 , \cf8 \strokec8 block\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Remove the appointment from the block's scheduled list\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 ) \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 findIndex\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 mrd\cf4 \strokec4 );\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 index\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf7 \strokec7 -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 removed\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 splice\cf4 \strokec4 (\cf8 \strokec8 index\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 )[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Add the freed up time back to available slots\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 ) \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 startTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 removed\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 endTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 removed\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Insert the new available slot in the correct position\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 insertIndex\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 findIndex\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 splice\cf4 \strokec4 (\cf8 \strokec8 insertIndex\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf7 \strokec7 -\cf9 \strokec9 1\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 insertIndex\cf4 \strokec4 , \cf9 \strokec9 0\cf4 \strokec4 , \{\cb1 \
\cb3         \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \cb1 \strokec4 \
\cb3       \});\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Merge adjacent or overlapping slots\cf4 \cb1 \strokec4 \
\cb3       \cf12 \strokec12 mergeAvailableSlots\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 addAppointmentToBlock\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 , \cf8 \strokec8 block\cf4 \strokec4 , \cf8 \strokec8 startTime\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Add the appointment to the block's scheduled list\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 ) \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 endTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  \cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Calculate required buffer time (max of prep time or default buffer)\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 requiredBuffer\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 appointment\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 , \cf6 \strokec6 CONFIG\cf4 \strokec4 .\cf6 \strokec6 CHECKIN_BUFFER\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3       \cf7 \strokec7 ...\cf8 \strokec8 appointment\cf4 \strokec4 ,\cb1 \
\cb3       \cf8 \strokec8 consultStart:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 startTime\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 consultEnd:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 endTime\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 checkInTime:\cf4 \strokec4  \cf12 \strokec12 minutesToTimeString\cf4 \strokec4 (\cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 requiredBuffer\cf4 \strokec4 )\cb1 \
\cb3     \});\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Sort scheduled appointments by start time\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 scheduled\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3       \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 ) \cf7 \strokec7 -\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 )\cb1 \
\cb3     );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Update available slots\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 ) \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slotIndex\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 findIndex\cf4 \strokec4 (\cf8 \strokec8 slot\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cb1 \
\cb3       \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \cb1 \strokec4 \
\cb3     );\cb1 \
\cb3     \cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slotIndex\cf4 \strokec4  \cf7 \strokec7 !==\cf4 \strokec4  \cf7 \strokec7 -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 slot\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf8 \strokec8 slotIndex\cf4 \strokec4 ];\cb1 \
\cb3       \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 splice\cf4 \strokec4 (\cf8 \strokec8 slotIndex\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Add remaining time before appointment if any\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3           \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 startTime\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Add remaining time after appointment if any\cf4 \cb1 \strokec4 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3           \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 endTime\cf4 \strokec4 ,\cb1 \
\cb3           \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 slot\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Sort available slots\cf4 \cb1 \strokec4 \
\cb3       \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 mergeAvailableSlots\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf13 \strokec13 if\cf4 \strokec4  (\cf7 \strokec7 !\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ) \cf13 \strokec13 return\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Sort slots by start time\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 , \cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Merge adjacent or overlapping slots\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 merged\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ]];\cb1 \
\cb3     \cf13 \strokec13 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 current\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 previous\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 merged\cf4 \strokec4 [\cf8 \strokec8 merged\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 current\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <=\cf4 \strokec4  \cf8 \strokec8 previous\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Slots overlap or are adjacent, merge them\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 previous\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 previous\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 , \cf8 \strokec8 current\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 );\cb1 \
\cb3       \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf2 \strokec2 // Slots are separate, add the current slot\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 merged\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 current\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 merged\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 groupFamilyMembers\cf4 \strokec4 (\cf8 \strokec8 patients\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyGroups\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf12 \strokec12 Map\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 individualPatients\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 '\cf14 \strokec14 \\n\cf10 \strokec10 === Processing Family Groups ==='\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Total patients to process: \cf5 \strokec5 $\{\cf8 \strokec8 patients\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 // First pass: Group family members\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 patients\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 isPartOfFamily\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 group\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 familyGroups\cf4 \strokec4 .\cf12 \strokec12 get\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 ) \cf7 \strokec7 ||\cf4 \strokec4  [];\cb1 \
\cb3         \cf8 \strokec8 group\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 familyGroups\cf4 \strokec4 .\cf12 \strokec12 set\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 .\cf8 \strokec8 familyGroup\cf4 \strokec4 , \cf8 \strokec8 group\cf4 \strokec4 );\cb1 \
\cb3       \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf8 \strokec8 individualPatients\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 patient\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Found \cf5 \strokec5 $\{\cf8 \strokec8 familyGroups\cf7 \strokec7 .\cf8 \strokec8 size\cf5 \strokec5 \}\cf10 \strokec10  family groups to schedule`\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 familyGroups\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 ((\cf8 \strokec8 group\cf4 \strokec4 , \cf8 \strokec8 groupId\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `\cf14 \strokec14 \\n\cf10 \strokec10 Processing Group \cf5 \strokec5 $\{\cf8 \strokec8 groupId\cf5 \strokec5 \}\cf10 \strokec10 :`\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `Members: \cf5 \strokec5 $\{\cf8 \strokec8 group\cf7 \strokec7 .\cf12 \strokec12 map\cf7 \strokec7 (\cf8 \strokec8 m\cf7 \strokec7  \cf5 \strokec5 =>\cf7 \strokec7  \cf8 \strokec8 m\cf7 \strokec7 [\cf10 \strokec10 "Patient Name"\cf7 \strokec7 ]).\cf12 \strokec12 join\cf7 \strokec7 (\cf10 \strokec10 ', '\cf7 \strokec7 )\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf2 \strokec2 // Create combined family scheduling units\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyUnits\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Array\cf4 \strokec4 .\cf12 \strokec12 from\cf4 \strokec4 (\cf8 \strokec8 familyGroups\cf4 \strokec4 .\cf12 \strokec12 values\cf4 \strokec4 ()).\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 group\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 maxConsultTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 group\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 consultTime\cf4 \strokec4 ));\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 maxPrepTime\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 group\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 prepTime\cf4 \strokec4 ));\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 minPriority\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 min\cf4 \strokec4 (\cf7 \strokec7 ...\cf8 \strokec8 group\cf4 \strokec4 .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 priority\cf4 \strokec4 ));\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 primaryMember\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 group\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 familyUnit\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \{\cb1 \
\cb3         \cf7 \strokec7 ...\cf6 \strokec6 primaryMember\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 name:\cf4 \strokec4  \cf10 \strokec10 `Family Group \cf5 \strokec5 $\{\cf6 \strokec6 primaryMember\cf7 \strokec7 .\cf8 \strokec8 familyGroup\cf5 \strokec5 \}\cf10 \strokec10  (\cf5 \strokec5 $\{\cf8 \strokec8 group\cf7 \strokec7 .\cf8 \strokec8 length\cf5 \strokec5 \}\cf10 \strokec10  members)`\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 familyMembers:\cf4 \strokec4  \cf8 \strokec8 group\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 consultTime:\cf4 \strokec4  \cf6 \strokec6 maxConsultTime\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 prepTime:\cf4 \strokec4  \cf6 \strokec6 maxPrepTime\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 priority:\cf4 \strokec4  \cf6 \strokec6 minPriority\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 procedures:\cf4 \strokec4  \cf8 \strokec8 group\cf4 \strokec4 .\cf12 \strokec12 flatMap\cf4 \strokec4 (\cf8 \strokec8 p\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 p\cf4 \strokec4 .\cf8 \strokec8 procedures\cf4 \strokec4 ),\cb1 \
\cb3         \cf8 \strokec8 isFamily:\cf4 \strokec4  \cf5 \strokec5 true\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `\cf14 \strokec14 \\n\cf10 \strokec10 Created family unit for group \cf5 \strokec5 $\{\cf6 \strokec6 primaryMember\cf7 \strokec7 .\cf8 \strokec8 familyGroup\cf5 \strokec5 \}\cf10 \strokec10 :`\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `- Total consultation time: \cf5 \strokec5 $\{\cf6 \strokec6 maxConsultTime\cf5 \strokec5 \}\cf10 \strokec10  minutes`\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `- Total prep time: \cf5 \strokec5 $\{\cf6 \strokec6 maxPrepTime\cf5 \strokec5 \}\cf10 \strokec10  minutes`\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf12 \strokec12 log\cf4 \strokec4 (\cf10 \strokec10 `- Priority: \cf5 \strokec5 $\{\cf6 \strokec6 minPriority\cf5 \strokec5 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf13 \strokec13 return\cf4 \strokec4  \cf6 \strokec6 familyUnit\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf13 \strokec13 return\cf4 \strokec4  [\cf7 \strokec7 ...\cf6 \strokec6 individualPatients\cf4 \strokec4 , \cf7 \strokec7 ...\cf6 \strokec6 familyUnits\cf4 \strokec4 ];\cb1 \
\cb3   \}\cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  \cf12 \strokec12 splitBlocksAroundFixedAppointments\cf4 \strokec4 (\cf8 \strokec8 blocks\cf4 \strokec4 , \cf8 \strokec8 fixedAppointments\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 splitPoints\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 fixedAppointments\cf4 \cb1 \strokec4 \
\cb3     .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\{\cb1 \
\cb3       \cf8 \strokec8 start:\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultStart\cf4 \strokec4 ),\cb1 \
\cb3       \cf8 \strokec8 end:\cf4 \strokec4  \cf12 \strokec12 timeStringToMinutes\cf4 \strokec4 (\cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 consultEnd\cf4 \strokec4 )\cb1 \
\cb3     \}))\cb1 \
\cb3     .\cf12 \strokec12 sort\cf4 \strokec4 ((\cf8 \strokec8 a\cf4 \strokec4 ,\cf8 \strokec8 b\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 a\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4  \cf8 \strokec8 b\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 );\cb1 \
\
\cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 currentBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [\cf7 \strokec7 ...\cf8 \strokec8 blocks\cf4 \strokec4 ];\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 splitPoints\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 appt\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 newBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3     \cf8 \strokec8 currentBlocks\cf4 \strokec4 .\cf12 \strokec12 forEach\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Block needs splitting\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf6 \strokec6 newBlocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3             \cf7 \strokec7 ...\cf8 \strokec8 block\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 available:\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \cb1 \strokec4 \
\cb3               .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 )\cb1 \
\cb3               .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\{\cb1 \
\cb3                 \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 min\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 , \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 )\cb1 \
\cb3               \}))\cb1 \
\cb3           \});\cb1 \
\cb3         \}\cb1 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  (\cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf6 \strokec6 newBlocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\{\cb1 \
\cb3             \cf7 \strokec7 ...\cf8 \strokec8 block\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 available:\cf4 \strokec4  \cf8 \strokec8 block\cf4 \strokec4 .\cf8 \strokec8 available\cf4 \cb1 \strokec4 \
\cb3               .\cf12 \strokec12 filter\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 )\cb1 \
\cb3               .\cf12 \strokec12 map\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4  \cf5 \strokec5 =>\cf4 \strokec4  (\{\cb1 \
\cb3                 \cf8 \strokec8 start:\cf4 \strokec4  \cf8 \strokec8 Math\cf4 \strokec4 .\cf12 \strokec12 max\cf4 \strokec4 (\cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 start\cf4 \strokec4 , \cf8 \strokec8 appt\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \strokec4 ),\cb1 \
\cb3                 \cf8 \strokec8 end:\cf4 \strokec4  \cf8 \strokec8 s\cf4 \strokec4 .\cf8 \strokec8 end\cf4 \cb1 \strokec4 \
\cb3               \}))\cb1 \
\cb3           \});\cb1 \
\cb3         \}\cb1 \
\cb3       \} \cf13 \strokec13 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf2 \strokec2 // Block unaffected\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 newBlocks\cf4 \strokec4 .\cf12 \strokec12 push\cf4 \strokec4 (\cf8 \strokec8 block\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\cb3     \cf8 \strokec8 currentBlocks\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 newBlocks\cf4 \strokec4 ;\cb1 \
\cb3   \});\cb1 \
\cb3   \cb1 \
\cb3   \cf13 \strokec13 return\cf4 \strokec4  \cf8 \strokec8 currentBlocks\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
}